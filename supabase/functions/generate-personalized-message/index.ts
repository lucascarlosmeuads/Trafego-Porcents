import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.49.8'

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
}

Deno.serve(async (req) => {
  // CORS preflight
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders })
  }

  try {
    console.log('üöÄ [generate-personalized-message] start')

    const supabaseUrl = Deno.env.get('SUPABASE_URL')!
    const serviceKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!

    const supabase = createClient(supabaseUrl, serviceKey, {
      auth: { autoRefreshToken: false, persistSession: false },
    })

    const body = await req.json().catch(() => ({}))
    const { leadId, email } = body as { leadId?: string; email?: string }

    if (!leadId && !email) {
      return new Response(JSON.stringify({ success: false, error: 'leadId ou email √© obrigat√≥rio' }), {
        headers: { ...corsHeaders, 'Content-Type': 'application/json' },
        status: 400,
      })
    }

    // Buscar lead
    let lead: any = null
    if (leadId) {
      const { data, error } = await supabase
        .from('formularios_parceria')
        .select('*')
        .eq('id', leadId)
        .maybeSingle()
      if (error) throw error
      lead = data
    } else if (email) {
      const { data, error } = await supabase
        .from('formularios_parceria')
        .select('*')
        .eq('email_usuario', email)
        .order('created_at', { ascending: false })
        .limit(1)
      if (error) throw error
      lead = data?.[0]
    }

    if (!lead) {
      throw new Error('Lead n√£o encontrado')
    }

    const emailCliente = lead.email_usuario as string

    // Buscar dados do cliente parceria (nome/telefone)
    const { data: clienteParceria } = await supabase
      .from('clientes_parceria')
      .select('nome_cliente, telefone')
      .eq('email_cliente', emailCliente)
      .maybeSingle()

    const respostas = lead.respostas || {}
    const tipoNegocio = lead.tipo_negocio || respostas.tipo_negocio || ''
    const produtoDescricao = lead.produto_descricao || respostas.produtoDescricao || respostas.produto_descricao || ''

    const nomeLead =
      clienteParceria?.nome_cliente ||
      respostas?.dadosPersonais?.nome ||
      respostas?.nome ||
      'Cliente'

    // extrair primeiro nome
    const firstName = String(nomeLead).trim().split(' ')[0] || 'Cliente'

    // telefone priorit√°rio
    const telefone =
      clienteParceria?.telefone ||
      respostas?.dadosPersonais?.whatsapp ||
      respostas?.whatsapp ||
      respostas?.telefone ||
      null

    // Montar mensagem personalizada no estilo solicitado
    const tipoTexto = tipoNegocio
      ? ` do seu nicho (${tipoNegocio}).`
      : '.'

    const produtoTexto = produtoDescricao
      ? ` Vi tamb√©m que voc√™ trabalha com: ${produtoDescricao}.`
      : ''

    const mensagem =
      `E a√≠, tudo bem? ${firstName}, Lucas aqui. E a√≠, tudo bem? Lucas aqui.
J√° finalizei aqui o seu planejamento estrat√©gico, baseado no que voc√™ preencheu l√° no formul√°rio e me falou aqui tamb√©m. Esse planejamento tem como objetivo voc√™ entender o que a gente vai fazer para vender. Porque eu n√£o posso perder tempo. Eu tenho que rodar uma oferta que realmente vende e depois eu vou ganhar s√≥ na comiss√£o.

Ent√£o, o que a gente vai fazer vai ser um funil interativo. Esse funil interativo, eu chamo ele de magn√©tico tamb√©m, porque ele, desde o an√∫ncio, vai chamar muita aten√ß√£o de uma forma diferente do que o seu mercado est√° fazendo. Porque eu pesquisei aqui o seu nicho e percebi padr√µes claros${tipoTexto}${produtoTexto}

Al√©m do an√∫ncio ser diferente e chamar muita aten√ß√£o, o funil vai fazer com que o cliente n√£o perceba que ele vai fazer uma compra e vai chegar l√° no final do funil de forma mais f√°cil. Ent√£o voc√™ vai ter um lead mais qualificado, que passou e mostrou interesse. Voc√™ n√£o vai ficar falando com gente curiosa ‚Äî esse ponto √© bem importante.

Dependendo do caso, a gente pode at√© vender uma coisa baratinha ali no final do funil, para depois voc√™ vender o seu produto principal.

Esse planejamento a√≠ √© apenas uma base para voc√™ entender. Caso voc√™ prossiga para a constru√ß√£o do funil, que envolve criar uma p√°gina de venda e o funil gamificado (que √© a parte da p√°gina para onde a gente manda o tr√°fego), precisamos ter os dois: a p√°gina de venda e o funil gamificado ‚Äî igual ao funil que voc√™ passou por mim. Voc√™ passou pelo meu funil, mas eu tenho minha p√°gina de venda tamb√©m: lucascarles.com.br. E o funil: funilmagnetico.traficoporcentos.com.

A ideia √© fazer a mesma coisa no seu neg√≥cio para vender bem. Como eu falei, eu preciso que venda, sen√£o eu n√£o vou ganhar porcentagem sobre as vendas. Para construir esse funil, existe um custo inicial (detalhei no documento). N√£o √© obrigat√≥rio fazer comigo: voc√™ pode fazer com a equipe que escolher, e eu posso orientar. Mas, se quiser fazer comigo, a gente j√° faz isso sempre aqui e entrega resultado (d√° uma olhada nos destaques com depoimentos dos clientes).

Se voc√™ topar, em at√© 15 dias corridos no m√°ximo a campanha j√° est√° no ar com o funil todo pronto.

Estou aqui para tirar qualquer d√∫vida. Assim que ler, me chama para a gente conversar.`;

    console.log('‚úÖ [generate-personalized-message] message composed for', emailCliente)

    return new Response(
      JSON.stringify({ success: true, message: mensagem, client_name: nomeLead, phone: telefone }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 200 },
    )
  } catch (error: any) {
    console.error('‚ùå [generate-personalized-message] error', error)
    return new Response(
      JSON.stringify({ success: false, error: error.message || 'Erro interno' }),
      { headers: { ...corsHeaders, 'Content-Type': 'application/json' }, status: 500 },
    )
  }
})
