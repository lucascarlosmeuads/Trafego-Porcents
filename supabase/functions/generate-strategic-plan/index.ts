import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('=== Iniciando gera√ß√£o de planejamento estrat√©gico ===');
    
    const { emailCliente } = await req.json();
    console.log('Email do cliente:', emailCliente);

    // Verificar API Key
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey || !openAIApiKey.startsWith('sk-')) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'API Key da OpenAI n√£o configurada corretamente.' 
        }),
        { 
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Buscar dados do briefing do cliente
    const { data: briefing, error: briefingError } = await supabase
      .from('briefings_cliente')
      .select('*')
      .eq('email_cliente', emailCliente)
      .single();

    if (briefingError || !briefing) {
      console.error('Erro ao buscar briefing:', briefingError);
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'Briefing do cliente n√£o encontrado.' 
        }),
        { 
          status: 404,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Construir prompt baseado nos dados do briefing
    const prompt = buildPromptFromBriefing(briefing);

    // Payload para OpenAI
    const openAIPayload = {
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
         content: `Voc√™ √© um estrategista de marketing digital da Tr√°fego Porcents. Crie um planejamento estrat√©gico COMPLETO, MAGNETIZANTE e VISUAL, seguindo EXATAMENTE esta formata√ß√£o markdown e limites de caracteres. O documento deve estar em PT-BR, com foco no mercado brasileiro, pronto para apresenta√ß√£o ao cliente e execu√ß√£o pela equipe.
 
# üìç CONSULTORIA ESTRAT√âGICA ‚Äì [NOME_CLIENTE] ‚Äì TR√ÅFEGO %
 
## üëã Introdu√ß√£o Personalizada
[Fa√ßa uma introdu√ß√£o calorosa e personalizada ao/√† [NOME_CLIENTE], mencione o produto/servi√ßo e mostre entendimento do contexto atual]
 
## üéØ P√∫blico-alvo que ser√° atingido
[Detalhe demografia, comportamento, psicografia e momento de vida]
 
**Subgrupos estrat√©gicos:**
- **Subgrupo 1:** [descri√ß√£o espec√≠fica]
- **Subgrupo 2:** [descri√ß√£o espec√≠fica]
- **Subgrupo 3:** [descri√ß√£o espec√≠fica]
- **Subgrupo 4:** [descri√ß√£o espec√≠fica]
 
## üò£ Dores desse p√∫blico
- **Dor Principal:** [dor espec√≠fica]
- **Dor Secund√°ria:** [dor espec√≠fica]
- **Emocional:** [medo/ansiedade/culpa]
- **Financeira:** [impacto no bolso]
- **Social:** [impacto social/reputacional]
 
## üí≠ Desejos desse p√∫blico
- **Principal:** [aspira√ß√£o]
- **Status:** [como quer ser visto]
- **Transforma√ß√£o:** [antes ‚Üí depois]
- **Seguran√ßa:** [estabilidade]
- **Reconhecimento:** [valida√ß√£o]
 
---
 
## ‚úçÔ∏è Estrat√©gia de Copy para Meta Ads (Deep Dive)
- **Voz e Persona da Marca:** [tom, ritmo, vocabul√°rio permitido e proibido]
- **Big Ideas / √Çngulos Criativos:** [3-5 √¢ngulos com promessa central]
- **Gatilhos Psicol√≥gicos Dominantes:** [ex.: prova, autoridade, urg√™ncia, exclusividade]
- **Obje√ß√µes e Respostas:** [lista de 5-7 obje√ß√µes com contra-argumentos]
- **Provas e Evid√™ncias a Usar:** [n√∫meros, casos, depoimentos, selos]
- **Guia de Linguagem:** [palavras que devemos enfatizar e evitar]
 
## üß≠ Matriz de Copies por Est√°gio do Funil (Meta Ads)
| Est√°gio | Prim√°rio (‚â§125) | Headline (‚â§40) | Descri√ß√£o (‚â§30) | CTA | Objetivo | M√©trica foco |
|---|---|---|---|---|---|---|
| Descoberta | [texto] | [headline] | [desc] | [CTA] | Alcance + Cliques | CTR, CPM |
| Considera√ß√£o | [texto] | [headline] | [desc] | [CTA] | Tr√°fego qualificado | CTR, CPC, Tempo p√°g |
| Convers√£o | [texto] | [headline] | [desc] | [CTA] | Leads/Vendas | CPA, ROAS |
| Reten√ß√£o/Recorr√™ncia | [texto] | [headline] | [desc] | [CTA] | LTV/Repeat | Frequ√™ncia, LTV |
 
## üöÄ Pacote de Copies (Prontas para Meta Ads)
### COPY 1 ‚Äì Quebra de Obje√ß√£o
- **HEADLINE:** [30‚Äì40]
- **CONCEITO VISUAL (contraintuitivo ‚â§80):** [descri√ß√£o]
- **DESCRI√á√ÉO (‚â§150):** [texto]
- **CTA:** [a√ß√£o]
 
### COPY 2 ‚Äì Prova Social
- **HEADLINE:** [30‚Äì40]
- **CONCEITO VISUAL (‚â§80):** [descri√ß√£o]
- **DESCRI√á√ÉO (‚â§150):** [texto]
- **CTA:** [a√ß√£o]
 
### COPY 3 ‚Äì Educacional + Curiosidade
- **HEADLINE:** [30‚Äì40]
- **CONCEITO VISUAL (‚â§80):** [descri√ß√£o]
- **DESCRI√á√ÉO (‚â§150):** [texto]
- **CTA:** [a√ß√£o]
 
## üì± T√≠tulos (‚â§40) e Descri√ß√µes (‚â§125) ‚Äì Meta Ads
- T√≠tulos: [5 op√ß√µes curtas e espec√≠ficas do nicho]
- Descri√ß√µes: [5 op√ß√µes com gatilhos]
 
---
 
## üß© Funil Interativo baseado nas Copies
- **Est√°gios:** Descoberta ‚Üí Considera√ß√£o ‚Üí Convers√£o ‚Üí Onboarding ‚Üí Reten√ß√£o/Recorr√™ncia ‚Üí Reativa√ß√£o
- **Canais por est√°gio:** [Reels/Feed/Stories/WhatsApp/LP/Email]
- **Criativo por est√°gio:** [tipo, dura√ß√£o, layout e raz√£o de uso]
- **Exemplo de Jornada:** [ex.: Reels ‚Üí LP ‚Üí WhatsApp ‚Üí Fechamento]
- **Crit√©rios de avan√ßo/retorno:** [regras objetivas por evento]
- **KPIs por est√°gio:** [lista objetiva com meta]
- **Automa√ß√£o/Follow-up:** [sequ√™ncia de mensagens c/ timing]
 
## üß™ Plano de ‚ÄúPente Fino‚Äù (otimiza√ß√£o palavra por palavra)
1. Mapear termos ‚Äúancora‚Äù de convers√£o [lista]
2. Testar varia√ß√µes sem√¢nticas (A/B/C) [plano]
3. Substituir adjetivos fracos por espec√≠ficos [tabela exemplos]
4. Ajustar ordem de argumentos (priorizar benef√≠cios ‚Äúantes‚Üídepois‚Äù)
5. Rotina semanal: coleta ‚Üí hip√≥tese ‚Üí teste ‚Üí aprendizagem
6. Checklist final por pe√ßa: Promessa | Prova | Clareza | Atrito | CTA
 
## üé® Diretrizes Visuais
- **Identidade:** [cores, tipografia, textura]
- **Layout por formato:** [1:1, 4:5, 9:16, 16:9]
- **Boas pr√°ticas:** [hierarquia, contraste, foco no 1¬∫ segundo]
- **Var. de criativos a produzir:** [lista com contagem]
 
## ‚úÖ Conformidade (Pol√≠ticas Meta)
- Evitar promessas absolutas e termos sens√≠veis
- Focar em ‚Äúresultados potenciais‚Äù e ‚Äúeduca√ß√£o‚Äù
- Limitar claims num√©ricos a casos com prova
 
---
 
### üìû Contato
**Nome:** [NOME_CLIENTE]  
**Email:** [email_cliente]
 
> "Na revis√£o de pente fino, vamos escolher PALAVRA POR PALAVRA das pe√ßas do funil para maximizar convers√£o."  
> Tr√°fego Porcents ‚Äì Plataforma Estrategista de Tr√°fego
 
INSTRU√á√ïES CR√çTICAS:
- Use EXATAMENTE esta estrutura em markdown e preencha TODOS os placeholders
- Respeite limites de caracteres indicados
- Personalize cada item com base no briefing do cliente
- Escreva em PT-BR com termos do mercado brasileiro
- Seja espec√≠fico, pr√°tico e pronto para execu√ß√£o`
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 4000
    };

    // Fazer chamada para OpenAI com retry
    let response;
    let retryCount = 0;
    const maxRetries = 2;
    
    while (retryCount <= maxRetries) {
      try {
        console.log(`üîÑ Tentativa ${retryCount + 1}/${maxRetries + 1} para OpenAI...`);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 60000);
        
        response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openAIApiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(openAIPayload),
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (response.ok) break;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        
      } catch (error) {
        retryCount++;
        if (retryCount > maxRetries) throw error;
        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
      }
    }

    const data = await response.json();
    const planejamento = data.choices[0].message.content;

    if (!planejamento || planejamento.trim().length === 0) {
      throw new Error('Planejamento vazio retornado pela OpenAI');
    }

    console.log('üíæ Salvando planejamento no banco de dados...');

    // Salvar planejamento na tabela briefings_cliente
    const { data: updateData, error } = await supabase
      .from('briefings_cliente')
      .update({ 
        planejamento_estrategico: planejamento,
        updated_at: new Date().toISOString()
      })
      .eq('email_cliente', emailCliente)
      .select();

    if (error) {
      console.error('‚ùå Erro ao salvar no banco:', error);
      throw new Error(`Database error: ${error.message}`);
    }

    console.log('‚úÖ Planejamento salvo com sucesso');

    return new Response(
      JSON.stringify({ 
        success: true, 
        planejamento: planejamento
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Error generating strategic plan:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Erro interno do servidor' 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }, 
        status: 500 
      }
    );
  }
});

function buildPromptFromBriefing(briefing: any): string {
  const nomeCliente = briefing.nome_marca || briefing.nome_produto || 'Cliente';
  
  let prompt = `INFORMA√á√ïES DO CLIENTE PARA PLANEJAMENTO ESTRAT√âGICO:

NOME DO CLIENTE/EMPRESA: ${nomeCliente}
PRODUTO/SERVI√áO: ${briefing.nome_produto || 'N√£o informado'}

DETALHES DO NEG√ìCIO:
- Descri√ß√£o resumida: ${briefing.descricao_resumida || 'N√£o informado'}
- P√∫blico-alvo: ${briefing.publico_alvo || 'N√£o informado'}
- Diferencial: ${briefing.diferencial || 'N√£o informado'}
- Investimento di√°rio: ${briefing.investimento_diario ? `R$ ${briefing.investimento_diario}` : 'N√£o informado'}
- Direcionamento da campanha: ${briefing.direcionamento_campanha || 'N√£o informado'}
- Abrang√™ncia do atendimento: ${briefing.abrangencia_atendimento || 'N√£o informado'}
- Localiza√ß√£o para divulga√ß√£o: ${briefing.localizacao_divulgacao || 'N√£o informado'}
- Tipo de presta√ß√£o de servi√ßo: ${briefing.tipo_prestacao_servico || 'N√£o informado'}
- Forma de pagamento: ${briefing.forma_pagamento || 'N√£o informado'}

CARACTER√çSTICAS CRIATIVAS:
- Estilo visual: ${briefing.estilo_visual || 'N√£o informado'}
- Cores desejadas: ${briefing.cores_desejadas || 'N√£o informado'}
- Cores proibidas: ${briefing.cores_proibidas || 'N√£o informado'}
- Tipo de fonte: ${briefing.tipo_fonte || 'N√£o informado'}
- Fonte espec√≠fica: ${briefing.fonte_especifica || 'N√£o informado'}
- Tipos de imagens preferidas: ${briefing.tipos_imagens_preferidas ? briefing.tipos_imagens_preferidas.join(', ') : 'N√£o informado'}

RECURSOS DISPON√çVEIS:
- Possui Facebook: ${briefing.possui_facebook ? 'Sim' : 'N√£o'}
- Possui Instagram: ${briefing.possui_instagram ? 'Sim' : 'N√£o'}
- Utiliza WhatsApp Business: ${briefing.utiliza_whatsapp_business ? 'Sim' : 'N√£o'}
- Criativos prontos: ${briefing.criativos_prontos ? 'Sim' : 'N√£o'}
- V√≠deos prontos: ${briefing.videos_prontos ? 'Sim' : 'N√£o'}
- Quer site: ${briefing.quer_site ? 'Sim' : 'N√£o'}

OBSERVA√á√ïES FINAIS:
${briefing.observacoes_finais || 'Nenhuma observa√ß√£o adicional'}

INSTRU√á√ïES ESPEC√çFICAS:
- Use o nome "${nomeCliente}" no t√≠tulo e ao longo do texto
- Baseie a persona no p√∫blico-alvo e tipo de neg√≥cio informados
- Crie t√≠tulos e descri√ß√µes espec√≠ficos para o nicho identificado
- Seja espec√≠fico sobre o p√∫blico (ex: "m√£es que trabalham home office" ao inv√©s de "mulheres")
- Use dados concretos quando fornecidos

OBJETIVO: Criar um mapeamento completo da persona ideal para este neg√≥cio.`;

  return prompt;
}