import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2.7.1';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('=== Iniciando gera√ß√£o de planejamento estrat√©gico ===');
    
    const { emailCliente } = await req.json();
    console.log('Email do cliente:', emailCliente);

    // Verificar API Key
    const openAIApiKey = Deno.env.get('OPENAI_API_KEY');
    if (!openAIApiKey || !openAIApiKey.startsWith('sk-')) {
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'API Key da OpenAI n√£o configurada corretamente.' 
        }),
        { 
          status: 500,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Supabase client
    const supabaseUrl = Deno.env.get('SUPABASE_URL')!;
    const supabaseKey = Deno.env.get('SUPABASE_SERVICE_ROLE_KEY')!;
    const supabase = createClient(supabaseUrl, supabaseKey);

    // Buscar dados do briefing do cliente
    const { data: briefing, error: briefingError } = await supabase
      .from('briefings_cliente')
      .select('*')
      .eq('email_cliente', emailCliente)
      .single();

    if (briefingError || !briefing) {
      console.error('Erro ao buscar briefing:', briefingError);
      return new Response(
        JSON.stringify({ 
          success: false, 
          error: 'Briefing do cliente n√£o encontrado.' 
        }),
        { 
          status: 404,
          headers: { ...corsHeaders, 'Content-Type': 'application/json' }
        }
      );
    }

    // Construir prompt baseado nos dados do briefing
    const prompt = buildPromptFromBriefing(briefing);

    // Payload para OpenAI
    const openAIPayload = {
      model: 'gpt-4o',
      messages: [
        {
          role: 'system',
         content: `Voc√™ √© um estrategista de marketing digital da Tr√°fego Porcents. Crie um planejamento estrat√©gico COMPLETO E DETALHADO seguindo EXATAMENTE esta formata√ß√£o markdown:

# üìç CONSULTORIA ESTRAT√âGICA ‚Äì [NOME_CLIENTE] ‚Äì TR√ÅFEGO %

## üëã Introdu√ß√£o Personalizada

[Fa√ßa uma introdu√ß√£o calorosa e personalizada para o cliente, mencionando o produto/marca espec√≠fico e demonstrando compreens√£o do neg√≥cio]

## üéØ P√∫blico-alvo que ser√° atingido

[Descreva detalhadamente o p√∫blico-alvo baseado nas informa√ß√µes do briefing, incluindo dados demogr√°ficos, comportamentais e psicogr√°ficos]

**Subgrupos estrat√©gicos:**
- **Subgrupo 1:** [descri√ß√£o espec√≠fica]
- **Subgrupo 2:** [descri√ß√£o espec√≠fica]
- **Subgrupo 3:** [descri√ß√£o espec√≠fica]
- **Subgrupo 4:** [descri√ß√£o espec√≠fica]

## üò£ Dores desse p√∫blico

- **Dor Principal:** [dor espec√≠fica mais relevante]
- **Dor Secund√°ria:** [segunda dor mais relevante]
- **Dor Emocional:** [aspecto emocional da dor]
- **Dor Financeira:** [impacto financeiro do problema]
- **Dor Social:** [impacto social/reputacional]

## üí≠ Desejos desse p√∫blico

- **Desejo Principal:** [maior aspira√ß√£o do p√∫blico]
- **Desejo de Status:** [como querem ser vistos]
- **Desejo de Transforma√ß√£o:** [mudan√ßa que buscam]
- **Desejo de Seguran√ßa:** [estabilidade que procuram]
- **Desejo de Reconhecimento:** [valida√ß√£o que precisam]

## ‚ù§Ô∏è Anseios emocionais desse p√∫blico

- **Esperan√ßa:** [o que sonham alcan√ßar]
- **Orgulho:** [do que querem se orgulhar]
- **Tranquilidade:** [paz de esp√≠rito que buscam]
- **Realiza√ß√£o:** [sensa√ß√£o de conquista]
- **Pertencimento:** [onde querem se encaixar]

## üëÄ O que essa pessoa v√™ no dia a dia

- [Situa√ß√£o visual 1 espec√≠fica do cotidiano]
- [Situa√ß√£o visual 2 espec√≠fica do cotidiano]
- [Situa√ß√£o visual 3 espec√≠fica do cotidiano]
- [Situa√ß√£o visual 4 espec√≠fica do cotidiano]

## üëÇ O que essa pessoa ouve

- "[Frase que costuma ouvir no ambiente 1]"
- "[Frase que costuma ouvir no ambiente 2]"
- "[Frase que costuma ouvir no ambiente 3]"
- "[Coment√°rio comum em seu c√≠rculo social]"

## üß† O que essa pessoa pensa e fala

- "[Pensamento recorrente sobre o problema]"
- "[Coment√°rio que faz sobre a situa√ß√£o]"
- "[Preocupa√ß√£o que expressa verbalmente]"
- "[Desabafo comum que faz]"

## ‚ú® O que ela sente e imagina

- [Sentimento espec√≠fico sobre a situa√ß√£o atual]
- [Imagina√ß√£o sobre como seria resolver o problema]
- [Fantasia sobre o futuro ideal]
- [Sensa√ß√£o que gostaria de experimentar]

## üö∂ Por onde ela anda

- **F√≠sico:** [Locais que frequenta fisicamente]
- **Digital:** [Sites e plataformas que acessa]
- **Social:** [Grupos e comunidades que participa]
- **Profissional:** [Ambientes de trabalho e networking]

## üíº O que ela faz

- **Rotina Principal:** [atividade principal do dia]
- **Trabalho:** [fun√ß√£o profissional espec√≠fica]
- **Lazer:** [como se diverte e relaxa]
- **Relacionamentos:** [como interage socialmente]

---

## üöÄ COPY 1 - QUEBRA DE OBJE√á√ÉO

### **HEADLINE:** [T√≠tulo impactante 30-40 caracteres]

### **CONCEITO VISUAL CONTRAINTUITIVO:**
[Descri√ß√£o da imagem que vai CONTRA o √≥bvio - m√°x 80 caracteres]

### **DESCRI√á√ÉO PERSUASIVA:**
[Texto que conecta dor + solu√ß√£o + urg√™ncia - m√°x 150 caracteres]

### **CTA:** [Call-to-action espec√≠fico]

---

## üéØ COPY 2 - PROVA SOCIAL

### **HEADLINE:** [Resultado espec√≠fico em n√∫meros - 30-40 caracteres]

### **CONCEITO VISUAL CONTRAINTUITIVO:**
[Imagem que mostra sucesso de forma inesperada - m√°x 80 caracteres]

### **DESCRI√á√ÉO PERSUASIVA:**
[Mini-hist√≥ria com prova social espec√≠fica - m√°x 150 caracteres]

### **CTA:** [Call-to-action espec√≠fico]

---

## üí° COPY 3 - EDUCACIONAL + CURIOSIDADE

### **HEADLINE:** [Pergunta ou fato curioso - 30-40 caracteres]

### **CONCEITO VISUAL CONTRAINTUITIVO:**
[Imagem educativa surpreendente - m√°x 80 caracteres]

### **DESCRI√á√ÉO PERSUASIVA:**
[Educa√ß√£o sobre problema + desperta curiosidade - m√°x 150 caracteres]

### **CTA:** [Call-to-action espec√≠fico]

---

## üì± T√çTULOS PARA AN√öNCIO (Meta Ads ‚Äì at√© 40 caracteres)

1. **[T√≠tulo 1 espec√≠fico do nicho]** üí∏üì±
2. **[T√≠tulo 2 espec√≠fico do nicho]** ‚≠ê
3. **[T√≠tulo 3 espec√≠fico do nicho]** üöÄ
4. **[T√≠tulo 4 espec√≠fico do nicho]** ‚ú®
5. **[T√≠tulo 5 espec√≠fico do nicho]** üéØ

## üìù DESCRI√á√ïES OTIMIZADAS (at√© 125 caracteres)

1. **[Descri√ß√£o 1 com gatilho espec√≠fico]**
2. **[Descri√ß√£o 2 com gatilho espec√≠fico]**
3. **[Descri√ß√£o 3 com gatilho espec√≠fico]**
4. **[Descri√ß√£o 4 com gatilho espec√≠fico]**
5. **[Descri√ß√£o 5 com gatilho espec√≠fico]**

## üîë Palavras-chave Sugeridas

### **Principais:**
- [palavra-chave 1]
- [palavra-chave 2]
- [palavra-chave 3]

### **Long Tail:**
- [frase long tail 1]
- [frase long tail 2]
- [frase long tail 3]

---

### üìû **Contato do Cliente:**
**Nome:** [Nome do Cliente]  
**Email:** [email_cliente]

---

[NOME_CLIENTE], com esse planejamento estrat√©gico voc√™ tem agora um mapa claro da persona ideal, que busca exatamente o que voc√™ entrega. Vamos agora construir criativos que ativem o gatilho da esperan√ßa e da virada real, sem promessas vazias ‚Äî apenas resultado com m√©todo certo.

> **"Com estrat√©gia e dedica√ß√£o,**  
> **TR√ÅFEGO PORCENTS**  
> **Sua Plataforma Estrategista de Tr√°fego."** üíØ

**INSTRU√á√ïES CR√çTICAS:**
- Use EXATAMENTE a formata√ß√£o markdown mostrada acima
- Substitua TODOS os placeholders [EXEMPLO] com informa√ß√µes ESPEC√çFICAS
- Mantenha todos os emojis nas posi√ß√µes corretas
- Use t√≠tulos em negrito conforme mostrado
- Personalize todo conte√∫do baseado no briefing
- HEADLINES: 30-40 caracteres
- CONCEITOS VISUAIS: 80 caracteres m√°ximo
- DESCRI√á√ïES: 150 caracteres m√°ximo`
        },
        {
          role: 'user',
          content: prompt
        }
      ],
      temperature: 0.7,
      max_tokens: 4000
    };

    // Fazer chamada para OpenAI com retry
    let response;
    let retryCount = 0;
    const maxRetries = 2;
    
    while (retryCount <= maxRetries) {
      try {
        console.log(`üîÑ Tentativa ${retryCount + 1}/${maxRetries + 1} para OpenAI...`);
        
        const controller = new AbortController();
        const timeoutId = setTimeout(() => controller.abort(), 60000);
        
        response = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openAIApiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify(openAIPayload),
          signal: controller.signal
        });
        
        clearTimeout(timeoutId);
        
        if (response.ok) break;
        throw new Error(`HTTP ${response.status}: ${response.statusText}`);
        
      } catch (error) {
        retryCount++;
        if (retryCount > maxRetries) throw error;
        await new Promise(resolve => setTimeout(resolve, 2000 * retryCount));
      }
    }

    const data = await response.json();
    const planejamento = data.choices[0].message.content;

    if (!planejamento || planejamento.trim().length === 0) {
      throw new Error('Planejamento vazio retornado pela OpenAI');
    }

    console.log('üíæ Salvando planejamento no banco de dados...');

    // Salvar planejamento na tabela briefings_cliente
    const { data: updateData, error } = await supabase
      .from('briefings_cliente')
      .update({ 
        planejamento_estrategico: planejamento,
        updated_at: new Date().toISOString()
      })
      .eq('email_cliente', emailCliente)
      .select();

    if (error) {
      console.error('‚ùå Erro ao salvar no banco:', error);
      throw new Error(`Database error: ${error.message}`);
    }

    console.log('‚úÖ Planejamento salvo com sucesso');

    return new Response(
      JSON.stringify({ 
        success: true, 
        planejamento: planejamento
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' } 
      }
    );

  } catch (error) {
    console.error('Error generating strategic plan:', error);
    return new Response(
      JSON.stringify({ 
        error: error.message || 'Erro interno do servidor' 
      }),
      { 
        headers: { ...corsHeaders, 'Content-Type': 'application/json' }, 
        status: 500 
      }
    );
  }
});

function buildPromptFromBriefing(briefing: any): string {
  const nomeCliente = briefing.nome_marca || briefing.nome_produto || 'Cliente';
  
  let prompt = `INFORMA√á√ïES DO CLIENTE PARA PLANEJAMENTO ESTRAT√âGICO:

NOME DO CLIENTE/EMPRESA: ${nomeCliente}
PRODUTO/SERVI√áO: ${briefing.nome_produto || 'N√£o informado'}

DETALHES DO NEG√ìCIO:
- Descri√ß√£o resumida: ${briefing.descricao_resumida || 'N√£o informado'}
- P√∫blico-alvo: ${briefing.publico_alvo || 'N√£o informado'}
- Diferencial: ${briefing.diferencial || 'N√£o informado'}
- Investimento di√°rio: ${briefing.investimento_diario ? `R$ ${briefing.investimento_diario}` : 'N√£o informado'}
- Direcionamento da campanha: ${briefing.direcionamento_campanha || 'N√£o informado'}
- Abrang√™ncia do atendimento: ${briefing.abrangencia_atendimento || 'N√£o informado'}
- Localiza√ß√£o para divulga√ß√£o: ${briefing.localizacao_divulgacao || 'N√£o informado'}
- Tipo de presta√ß√£o de servi√ßo: ${briefing.tipo_prestacao_servico || 'N√£o informado'}
- Forma de pagamento: ${briefing.forma_pagamento || 'N√£o informado'}

CARACTER√çSTICAS CRIATIVAS:
- Estilo visual: ${briefing.estilo_visual || 'N√£o informado'}
- Cores desejadas: ${briefing.cores_desejadas || 'N√£o informado'}
- Cores proibidas: ${briefing.cores_proibidas || 'N√£o informado'}
- Tipo de fonte: ${briefing.tipo_fonte || 'N√£o informado'}
- Fonte espec√≠fica: ${briefing.fonte_especifica || 'N√£o informado'}
- Tipos de imagens preferidas: ${briefing.tipos_imagens_preferidas ? briefing.tipos_imagens_preferidas.join(', ') : 'N√£o informado'}

RECURSOS DISPON√çVEIS:
- Possui Facebook: ${briefing.possui_facebook ? 'Sim' : 'N√£o'}
- Possui Instagram: ${briefing.possui_instagram ? 'Sim' : 'N√£o'}
- Utiliza WhatsApp Business: ${briefing.utiliza_whatsapp_business ? 'Sim' : 'N√£o'}
- Criativos prontos: ${briefing.criativos_prontos ? 'Sim' : 'N√£o'}
- V√≠deos prontos: ${briefing.videos_prontos ? 'Sim' : 'N√£o'}
- Quer site: ${briefing.quer_site ? 'Sim' : 'N√£o'}

OBSERVA√á√ïES FINAIS:
${briefing.observacoes_finais || 'Nenhuma observa√ß√£o adicional'}

INSTRU√á√ïES ESPEC√çFICAS:
- Use o nome "${nomeCliente}" no t√≠tulo e ao longo do texto
- Baseie a persona no p√∫blico-alvo e tipo de neg√≥cio informados
- Crie t√≠tulos e descri√ß√µes espec√≠ficos para o nicho identificado
- Seja espec√≠fico sobre o p√∫blico (ex: "m√£es que trabalham home office" ao inv√©s de "mulheres")
- Use dados concretos quando fornecidos

OBJETIVO: Criar um mapeamento completo da persona ideal para este neg√≥cio.`;

  return prompt;
}