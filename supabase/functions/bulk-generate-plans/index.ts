import "https://deno.land/x/xhr@0.1.0/mod.ts";
import { serve } from "https://deno.land/std@0.168.0/http/server.ts";
import { createClient } from 'https://esm.sh/@supabase/supabase-js@2';

const corsHeaders = {
  'Access-Control-Allow-Origin': '*',
  'Access-Control-Allow-Headers': 'authorization, x-client-info, apikey, content-type',
};

const openaiApiKey = Deno.env.get('OPENAI_API_KEY');

serve(async (req) => {
  if (req.method === 'OPTIONS') {
    return new Response(null, { headers: corsHeaders });
  }

  try {
    console.log('=== Iniciando gera√ß√£o em massa de planejamentos ===');
    
    if (!openaiApiKey) {
      throw new Error('OPENAI_API_KEY n√£o configurada');
    }

    const supabaseClient = createClient(
      Deno.env.get('SUPABASE_URL') ?? '',
      Deno.env.get('SUPABASE_SERVICE_ROLE_KEY') ?? ''
    );

    // Buscar todos os briefings sem planejamento
    const { data: briefings, error: fetchError } = await supabaseClient
      .from('briefings_cliente')
      .select('email_cliente, nome_produto')
      .eq('formulario_completo', true)
      .is('planejamento_estrategico', null);

    if (fetchError) {
      console.error('Erro ao buscar briefings:', fetchError);
      throw fetchError;
    }

    console.log(`üìä Encontrados ${briefings?.length || 0} briefings para processar`);

    let sucessos = 0;
    let erros = 0;
    const detalhes = [];

    // Processar cada briefing
    for (const briefing of briefings || []) {
      try {
        console.log(`üîÑ Processando: ${briefing.email_cliente} - ${briefing.nome_produto}`);
        
        // Buscar dados completos do briefing
        const { data: briefingCompleto, error: briefingError } = await supabaseClient
          .from('briefings_cliente')
          .select('*')
          .eq('email_cliente', briefing.email_cliente)
          .single();

        if (briefingError) {
          console.error(`Erro ao buscar briefing completo para ${briefing.email_cliente}:`, briefingError);
          erros++;
          detalhes.push({ email: briefing.email_cliente, status: 'erro', erro: briefingError.message });
          continue;
        }

        // Gerar prompt
        const prompt = buildPromptFromBriefing(briefingCompleto);
        
        // Chamar OpenAI
        const openaiResponse = await fetch('https://api.openai.com/v1/chat/completions', {
          method: 'POST',
          headers: {
            'Authorization': `Bearer ${openaiApiKey}`,
            'Content-Type': 'application/json',
          },
          body: JSON.stringify({
            model: 'gpt-4o',
            messages: [
              {
                role: 'system',
                content: 'Voc√™ √© um especialista em marketing digital e planejamento estrat√©gico. Sua fun√ß√£o √© criar um planejamento estrat√©gico completo e detalhado baseado nas informa√ß√µes do briefing do cliente.'
              },
              {
                role: 'user',
                content: prompt
              }
            ],
            max_tokens: 4000,
            temperature: 0.7
          }),
        });

        if (!openaiResponse.ok) {
          throw new Error(`Erro OpenAI: ${openaiResponse.status}`);
        }

        const openaiData = await openaiResponse.json();
        const planejamento = openaiData.choices[0].message.content;

        // Salvar o planejamento
        const { error: updateError } = await supabaseClient
          .from('briefings_cliente')
          .update({ planejamento_estrategico: planejamento })
          .eq('email_cliente', briefing.email_cliente);

        if (updateError) {
          console.error(`Erro ao salvar planejamento para ${briefing.email_cliente}:`, updateError);
          erros++;
          detalhes.push({ email: briefing.email_cliente, status: 'erro', erro: updateError.message });
        } else {
          console.log(`‚úÖ Planejamento gerado para: ${briefing.email_cliente}`);
          sucessos++;
          detalhes.push({ email: briefing.email_cliente, status: 'sucesso' });
        }

        // Pequena pausa para n√£o sobrecarregar
        await new Promise(resolve => setTimeout(resolve, 500));

      } catch (error) {
        console.error(`Erro ao processar ${briefing.email_cliente}:`, error);
        erros++;
        detalhes.push({ email: briefing.email_cliente, status: 'erro', erro: error.message });
      }
    }

    console.log(`üìä Processamento conclu√≠do: ${sucessos} sucessos, ${erros} erros`);

    return new Response(JSON.stringify({
      success: true,
      total: briefings?.length || 0,
      sucessos,
      erros,
      detalhes
    }), {
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });

  } catch (error) {
    console.error('Erro na gera√ß√£o em massa:', error);
    return new Response(JSON.stringify({
      success: false,
      error: error.message
    }), {
      status: 500,
      headers: { ...corsHeaders, 'Content-Type': 'application/json' },
    });
  }
});

function buildPromptFromBriefing(briefing: any): string {
  return `
Por favor, crie um PLANEJAMENTO ESTRAT√âGICO COMPLETO E DETALHADO para a seguinte empresa/produto:

=== INFORMA√á√ïES DO CLIENTE ===
Marca/Produto: ${briefing.nome_marca || briefing.nome_produto || 'N√£o informado'}
Descri√ß√£o: ${briefing.descricao_resumida || 'N√£o informado'}
Diferencial: ${briefing.diferencial || 'N√£o informado'}
P√∫blico-alvo: ${briefing.publico_alvo || 'N√£o informado'}
Investimento di√°rio: R$ ${briefing.investimento_diario || 'N√£o informado'}

=== INFORMA√á√ïES T√âCNICAS ===
Direcionamento da campanha: ${briefing.direcionamento_campanha || 'N√£o informado'}
Localiza√ß√£o para divulga√ß√£o: ${briefing.localizacao_divulgacao || 'N√£o informado'}
Abrang√™ncia do atendimento: ${briefing.abrangencia_atendimento || 'N√£o informado'}
Tipo de presta√ß√£o de servi√ßo: ${briefing.tipo_prestacao_servico || 'N√£o informado'}

=== CARACTER√çSTICAS CRIATIVAS ===
Estilo visual: ${briefing.estilo_visual || 'N√£o informado'}
Cores desejadas: ${briefing.cores_desejadas || 'N√£o informado'}
Cores proibidas: ${briefing.cores_proibidas || 'N√£o informado'}
Tipo de fonte: ${briefing.tipo_fonte || 'N√£o informado'}
Fonte espec√≠fica: ${briefing.fonte_especifica || 'N√£o informado'}
Tipos de imagens preferidas: ${briefing.tipos_imagens_preferidas?.join(', ') || 'N√£o informado'}

=== RECURSOS DISPON√çVEIS ===
Possui Facebook: ${briefing.possui_facebook ? 'Sim' : 'N√£o'}
Possui Instagram: ${briefing.possui_instagram ? 'Sim' : 'N√£o'}
Utiliza WhatsApp Business: ${briefing.utiliza_whatsapp_business ? 'Sim' : 'N√£o'}
Criativos prontos: ${briefing.criativos_prontos ? 'Sim' : 'N√£o'}
V√≠deos prontos: ${briefing.videos_prontos ? 'Sim' : 'N√£o'}
Quer site: ${briefing.quer_site ? 'Sim' : 'N√£o'}

=== OUTRAS INFORMA√á√ïES ===
Forma de pagamento: ${briefing.forma_pagamento || 'N√£o informado'}
Observa√ß√µes finais: ${briefing.observacoes_finais || 'N√£o informado'}
Resumo conversa vendedor: ${briefing.resumo_conversa_vendedor || 'N√£o informado'}

=== INSTRU√á√ïES PARA O PLANEJAMENTO ===

Crie um planejamento estrat√©gico COMPLETO E DETALHADO que inclua:

1. **AN√ÅLISE DE MERCADO E POSICIONAMENTO**
2. **ESTRAT√âGIA DE P√öBLICO-ALVO**
3. **ESTRAT√âGIA DE CANAIS E PLATAFORMAS**
4. **ESTRAT√âGIA DE CONTE√öDO**
5. **ESTRAT√âGIA DE CAMPANHAS PAGAS**
6. **CRONOGRAMA DE IMPLEMENTA√á√ÉO**
7. **M√âTRICAS E KPIs**
8. **OR√áAMENTO E DISTRIBUI√á√ÉO**
9. **ESTRAT√âGIAS DE CONVERS√ÉO**
10. **PLANO DE CONTING√äNCIA**

Para cada se√ß√£o, forne√ßa informa√ß√µes espec√≠ficas, detalhadas e action√°veis baseadas nas informa√ß√µes fornecidas.

O planejamento deve ser PR√ÅTICO, ESPEC√çFICO e pronto para implementa√ß√£o.
`;
}