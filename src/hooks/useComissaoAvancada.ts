
import { useState } from 'react'
import { supabase } from '@/lib/supabase'
import { useToast } from '@/hooks/use-toast'
import { useAuth } from '@/hooks/useAuth'

export interface HistoricoPagamento {
  id: string
  cliente_id: number
  valor_pago: number
  data_pagamento: string
  pago_por: string
  observacoes?: string
  created_at: string
}

export interface ComissaoOperacoes {
  atualizarValorComissao: (clienteId: string, novoValor: number) => Promise<boolean>
  registrarPagamento: (clienteId: string, valor: number, observacoes?: string) => Promise<boolean>
  buscarHistoricoPagamentos: (clienteId: string) => Promise<HistoricoPagamento[]>
  marcarComoUltimoPago: (clienteId: string) => Promise<boolean>
  removerMarcacaoUltimoPago: (clienteId: string) => Promise<boolean>
  calcularTotaisPorStatus: (clientes: any[]) => { totalPendente: number, totalPago: number }
}

export function useComissaoAvancada(): ComissaoOperacoes & { loading: boolean } {
  const [loading, setLoading] = useState(false)
  const { toast } = useToast()
  const { user } = useAuth()

  const atualizarValorComissao = async (clienteId: string, novoValor: number): Promise<boolean> => {
    if (novoValor < 10 || novoValor > 1000) {
      toast({
        title: "Valor inv√°lido",
        description: "O valor da comiss√£o deve estar entre R$ 10 e R$ 1.000",
        variant: "destructive"
      })
      return false
    }

    setLoading(true)
    try {
      const { error } = await supabase
        .from('todos_clientes')
        .update({ valor_comissao: novoValor })
        .eq('id', clienteId)

      if (error) throw error

      toast({
        title: "‚úÖ Valor atualizado",
        description: `Comiss√£o atualizada para R$ ${novoValor.toFixed(2)}`,
      })
      return true
    } catch (error: any) {
      toast({
        title: "‚ùå Erro",
        description: error.message,
        variant: "destructive"
      })
      return false
    } finally {
      setLoading(false)
    }
  }

  const registrarPagamento = async (clienteId: string, valor: number, observacoes?: string): Promise<boolean> => {
    if (!user?.email) {
      toast({
        title: "‚ùå Erro de autentica√ß√£o",
        description: "Usu√°rio n√£o autenticado",
        variant: "destructive"
      })
      return false
    }

    setLoading(true)
    try {
      // Registrar pagamento no hist√≥rico
      const { error: historyError } = await supabase
        .from('historico_pagamentos_comissao')
        .insert({
          cliente_id: parseInt(clienteId),
          valor_pago: valor,
          pago_por: user.email,
          observacoes: observacoes || null
        })

      if (historyError) throw historyError

      toast({
        title: "‚úÖ Pagamento registrado",
        description: `Comiss√£o de R$ ${valor.toFixed(2)} registrada com sucesso`,
      })
      return true
    } catch (error: any) {
      toast({
        title: "‚ùå Erro ao registrar pagamento",
        description: error.message,
        variant: "destructive"
      })
      return false
    } finally {
      setLoading(false)
    }
  }

  const buscarHistoricoPagamentos = async (clienteId: string): Promise<HistoricoPagamento[]> => {
    try {
      const { data, error } = await supabase
        .from('historico_pagamentos_comissao')
        .select('*')
        .eq('cliente_id', parseInt(clienteId))
        .order('data_pagamento', { ascending: false })

      if (error) throw error
      return data || []
    } catch (error: any) {
      console.error('Erro ao buscar hist√≥rico:', error)
      return []
    }
  }

  const marcarComoUltimoPago = async (clienteId: string): Promise<boolean> => {
    console.log('üåü [useComissaoAvancada] === MARCAR COMO √öLTIMO PAGO ===')
    console.log('üåü [useComissaoAvancada] Cliente ID:', clienteId)
    console.log('üåü [useComissaoAvancada] Usu√°rio atual:', user?.email)
    
    setLoading(true)
    try {
      // Primeiro, verificar se o cliente existe
      console.log('üîç [useComissaoAvancada] Verificando se cliente existe...')
      const { data: clienteExiste, error: checkError } = await supabase
        .from('todos_clientes')
        .select('id, nome_cliente, eh_ultimo_pago')
        .eq('id', clienteId)
        .single()

      if (checkError) {
        console.error('‚ùå [useComissaoAvancada] Erro ao verificar cliente:', checkError)
        throw checkError
      }

      console.log('‚úÖ [useComissaoAvancada] Cliente encontrado:', clienteExiste)

      // Remover marca√ß√£o de outros clientes primeiro
      console.log('üîÑ [useComissaoAvancada] Removendo marca√ß√£o de outros clientes...')
      const { error: removeError } = await supabase
        .from('todos_clientes')
        .update({ eh_ultimo_pago: false })
        .neq('id', clienteId)

      if (removeError) {
        console.error('‚ùå [useComissaoAvancada] Erro ao remover outras marca√ß√µes:', removeError)
        throw removeError
      }

      console.log('‚úÖ [useComissaoAvancada] Outras marca√ß√µes removidas')

      // Marcar este cliente como √∫ltimo pago
      console.log('‚≠ê [useComissaoAvancada] Marcando cliente como √∫ltimo pago...')
      const { data: updateData, error: updateError } = await supabase
        .from('todos_clientes')
        .update({ eh_ultimo_pago: true })
        .eq('id', clienteId)
        .select('id, nome_cliente, eh_ultimo_pago')

      if (updateError) {
        console.error('‚ùå [useComissaoAvancada] Erro ao marcar como √∫ltimo pago:', updateError)
        throw updateError
      }

      console.log('‚úÖ [useComissaoAvancada] Cliente marcado com sucesso:', updateData)

      // Verificar se a atualiza√ß√£o realmente aconteceu
      const { data: verificacao, error: verifyError } = await supabase
        .from('todos_clientes')
        .select('id, nome_cliente, eh_ultimo_pago')
        .eq('id', clienteId)
        .single()

      if (verifyError) {
        console.error('‚ùå [useComissaoAvancada] Erro na verifica√ß√£o:', verifyError)
      } else {
        console.log('üîç [useComissaoAvancada] Verifica√ß√£o final:', verificacao)
        console.log('üîç [useComissaoAvancada] eh_ultimo_pago atual:', verificacao.eh_ultimo_pago)
      }

      toast({
        title: "‚≠ê Cliente marcado",
        description: `${clienteExiste.nome_cliente} marcado como √∫ltimo pago`,
      })
      return true
    } catch (error: any) {
      console.error('üí• [useComissaoAvancada] Erro geral:', error)
      toast({
        title: "‚ùå Erro",
        description: `Erro ao marcar cliente: ${error.message}`,
        variant: "destructive"
      })
      return false
    } finally {
      setLoading(false)
    }
  }

  const removerMarcacaoUltimoPago = async (clienteId: string): Promise<boolean> => {
    console.log('üåü [useComissaoAvancada] === REMOVER MARCA√á√ÉO √öLTIMO PAGO ===')
    console.log('üåü [useComissaoAvancada] Cliente ID:', clienteId)
    
    setLoading(true)
    try {
      console.log('üîÑ [useComissaoAvancada] Removendo marca√ß√£o de √∫ltimo pago...')
      const { data: updateData, error } = await supabase
        .from('todos_clientes')
        .update({ eh_ultimo_pago: false })
        .eq('id', clienteId)
        .select('id, nome_cliente, eh_ultimo_pago')

      if (error) {
        console.error('‚ùå [useComissaoAvancada] Erro ao remover marca√ß√£o:', error)
        throw error
      }

      console.log('‚úÖ [useComissaoAvancada] Marca√ß√£o removida:', updateData)

      toast({
        title: "‚úÖ Marca√ß√£o removida",
        description: "Marca√ß√£o de √∫ltimo pago removida",
      })
      return true
    } catch (error: any) {
      console.error('üí• [useComissaoAvancada] Erro geral:', error)
      toast({
        title: "‚ùå Erro",
        description: `Erro ao remover marca√ß√£o: ${error.message}`,
        variant: "destructive"
      })
      return false
    } finally {
      setLoading(false)
    }
  }

  const calcularTotaisPorStatus = (clientes: any[]) => {
    let totalPendente = 0
    let totalPago = 0

    clientes.forEach(cliente => {
      const valor = cliente.valor_comissao || 60
      if (cliente.comissao === 'Pago') {
        totalPago += valor
      } else {
        totalPendente += valor
      }
    })

    return { totalPendente, totalPago }
  }

  return {
    atualizarValorComissao,
    registrarPagamento,
    buscarHistoricoPagamentos,
    marcarComoUltimoPago,
    removerMarcacaoUltimoPago,
    calcularTotaisPorStatus,
    loading
  }
}
