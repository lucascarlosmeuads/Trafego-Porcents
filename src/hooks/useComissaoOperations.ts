
import { useState } from 'react'
import { supabase } from '@/lib/supabase'
import { useToast } from '@/hooks/use-toast'

export function useComissaoOperations() {
  const [loading, setLoading] = useState(false)
  const [operationLock, setOperationLock] = useState(false)
  const { toast } = useToast()

  const atualizarComissao = async (
    clienteId: string | number,
    novoStatusComissao: string
  ) => {
    console.log('üöÄ [useComissaoOperations] === IN√çCIO DA OPERA√á√ÉO CR√çTICA ===')
    console.log('üîç [useComissaoOperations] Par√¢metros recebidos:', {
      clienteId,
      clienteIdType: typeof clienteId,
      novoStatusComissao,
      operationLock
    })

    // Verificar se h√° uma opera√ß√£o em andamento (LOCK GLOBAL)
    if (operationLock) {
      console.error('üö´ [useComissaoOperations] OPERA√á√ÉO BLOQUEADA: J√° existe uma opera√ß√£o em andamento')
      toast({
        title: "Aguarde",
        description: "J√° existe uma opera√ß√£o de comiss√£o em andamento",
        variant: "destructive"
      })
      return false
    }

    // Ativar o lock global
    setOperationLock(true)
    setLoading(true)
    
    try {
      const clienteIdNumber = Number(clienteId)
      
      // VALIDA√á√ÉO 1: Verificar se o ID √© v√°lido
      if (isNaN(clienteIdNumber) || clienteIdNumber <= 0) {
        console.error('‚ùå [useComissaoOperations] ID INV√ÅLIDO:', { clienteId, clienteIdNumber })
        throw new Error(`ID do cliente inv√°lido: ${clienteId}`)
      }

      // VALIDA√á√ÉO 2: Buscar o cliente ANTES da atualiza√ß√£o para verificar se existe E obter estado atual
      console.log('üîç [useComissaoOperations] STEP 1: Buscando cliente no banco de dados...')
      const { data: clienteAntes, error: fetchError } = await supabase
        .from('todos_clientes')
        .select('id, nome_cliente, email_cliente, comissao, valor_comissao')
        .eq('id', clienteIdNumber)
        .single()

      if (fetchError) {
        console.error('‚ùå [useComissaoOperations] Erro ao buscar cliente:', fetchError)
        throw new Error(`Cliente n√£o encontrado: ${fetchError.message}`)
      }

      if (!clienteAntes) {
        console.error('‚ùå [useComissaoOperations] Cliente n√£o existe no banco:', clienteIdNumber)
        throw new Error(`Cliente com ID ${clienteIdNumber} n√£o encontrado`)
      }

      console.log('‚úÖ [useComissaoOperations] STEP 1 COMPLETO - Cliente encontrado:', {
        id: clienteAntes.id,
        nome: clienteAntes.nome_cliente,
        email: clienteAntes.email_cliente,
        comissaoAtual: clienteAntes.comissao,
        valorComissao: clienteAntes.valor_comissao
      })

      // VALIDA√á√ÉO 3: Verificar se o status est√° realmente mudando
      if (clienteAntes.comissao === novoStatusComissao) {
        console.warn('‚ö†Ô∏è [useComissaoOperations] Status j√° √© o mesmo, opera√ß√£o desnecess√°ria')
        toast({
          title: "Aviso",
          description: `A comiss√£o de ${clienteAntes.nome_cliente} j√° est√° como: ${novoStatusComissao}`,
        })
        return true
      }

      // ATUALIZA√á√ÉO CR√çTICA: Atualizar apenas a coluna comissao na tabela todos_clientes COM SELECT
      console.log('üíæ [useComissaoOperations] STEP 2: Executando atualiza√ß√£o no banco...')
      const { data: updatedData, error: updateError } = await supabase
        .from('todos_clientes')
        .update({ 
          comissao: novoStatusComissao
        })
        .eq('id', clienteIdNumber)
        .select('id, nome_cliente, comissao, valor_comissao')

      if (updateError) {
        console.error('‚ùå [useComissaoOperations] Erro na atualiza√ß√£o:', updateError)
        throw updateError
      }

      // VALIDA√á√ÉO 4: Verificar se a atualiza√ß√£o retornou dados
      if (!updatedData || updatedData.length === 0) {
        console.error('‚ùå [useComissaoOperations] ERRO CR√çTICO: Nenhuma linha foi atualizada')
        throw new Error('Nenhuma linha foi afetada pela atualiza√ß√£o')
      }

      if (updatedData.length > 1) {
        console.error('‚ùå [useComissaoOperations] ERRO CR√çTICO: M√∫ltiplas linhas afetadas:', updatedData.length)
        throw new Error(`Erro cr√≠tico: ${updatedData.length} linhas afetadas (deveria ser 1)`)
      }

      const clienteAtualizado = updatedData[0]

      // VALIDA√á√ÉO 5: Confirmar que a atualiza√ß√£o foi aplicada corretamente
      if (clienteAtualizado.comissao !== novoStatusComissao) {
        console.error('‚ùå [useComissaoOperations] VALIDA√á√ÉO FALHOU:', {
          esperado: novoStatusComissao,
          encontrado: clienteAtualizado.comissao
        })
        throw new Error('A atualiza√ß√£o n√£o foi aplicada corretamente')
      }

      // VALIDA√á√ÉO 6: Verificar se o ID permanece o mesmo (seguran√ßa anti-bug)
      if (clienteAtualizado.id !== clienteAntes.id) {
        console.error('‚ùå [useComissaoOperations] ERRO CR√çTICO: ID mudou durante atualiza√ß√£o:', {
          antes: clienteAntes.id,
          depois: clienteAtualizado.id
        })
        throw new Error('Erro cr√≠tico: ID do cliente mudou durante atualiza√ß√£o')
      }

      // VALIDA√á√ÉO 7: Buscar novamente do banco para confirmar persist√™ncia
      console.log('üîç [useComissaoOperations] STEP 3: Verifica√ß√£o final - rebuscando cliente...')
      const { data: clienteDepois, error: verifyError } = await supabase
        .from('todos_clientes')
        .select('id, nome_cliente, comissao, valor_comissao')
        .eq('id', clienteIdNumber)
        .single()

      if (verifyError || !clienteDepois) {
        console.error('‚ùå [useComissaoOperations] Erro na verifica√ß√£o final:', verifyError)
        throw new Error('Erro na verifica√ß√£o final da atualiza√ß√£o')
      }

      if (clienteDepois.comissao !== novoStatusComissao) {
        console.error('‚ùå [useComissaoOperations] VALIDA√á√ÉO FINAL FALHOU:', {
          esperado: novoStatusComissao,
          encontrado: clienteDepois.comissao
        })
        throw new Error('A atualiza√ß√£o n√£o foi persistida corretamente')
      }

      console.log('‚úÖ [useComissaoOperations] STEP 3 COMPLETO - Verifica√ß√£o final OK:', {
        clienteId: clienteDepois.id,
        clienteNome: clienteDepois.nome_cliente,
        statusFinal: clienteDepois.comissao,
        valorComissao: clienteDepois.valor_comissao
      })

      console.log('‚úÖ [useComissaoOperations] OPERA√á√ÉO CONCLU√çDA COM SUCESSO TOTAL:', {
        clienteId: clienteAtualizado.id,
        clienteNome: clienteAtualizado.nome_cliente,
        statusAnterior: clienteAntes.comissao,
        novoStatus: clienteAtualizado.comissao,
        valorComissao: clienteAtualizado.valor_comissao
      })

      toast({
        title: "Comiss√£o atualizada!",
        description: `${clienteAtualizado.nome_cliente}: ${novoStatusComissao}`,
      })

      return true

    } catch (error) {
      console.error('üí• [useComissaoOperations] ERRO CR√çTICO NA OPERA√á√ÉO:', error)
      toast({
        title: "Erro cr√≠tico ao atualizar comiss√£o",
        description: error instanceof Error ? error.message : "Erro desconhecido",
        variant: "destructive"
      })
      return false
    } finally {
      setLoading(false)
      setOperationLock(false)
      console.log('üèÅ [useComissaoOperations] === FIM DA OPERA√á√ÉO CR√çTICA ===')
    }
  }

  return {
    atualizarComissao,
    loading,
    operationLock
  }
}
