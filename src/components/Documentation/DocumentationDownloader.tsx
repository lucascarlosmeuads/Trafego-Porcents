
import { useState } from 'react'
import { Button } from '@/components/ui/button'
import { Download, FileText, Loader2 } from 'lucide-react'
import { toast } from '@/components/ui/sonner'

// Lista completa dos documentos
const documentationFiles = [
  { id: 'readme', title: '√çndice Geral', path: 'README.md' },
  { id: 'visao-geral', title: '1. Vis√£o Geral', path: '01-visao-geral.md' },
  { id: 'perfis-usuario', title: '2. Perfis de Usu√°rio', path: '02-perfis-usuario.md' },
  { id: 'modulos-sistema', title: '3. M√≥dulos do Sistema', path: '03-modulos-sistema.md' },
  { id: 'base-dados', title: '4. Base de Dados', path: '04-base-dados.md' },
  { id: 'fluxo-trabalho', title: '5. Fluxo de Trabalho', path: '05-fluxo-trabalho.md' },
  { id: 'sistema-chat', title: '6. Sistema de Chat', path: '06-sistema-chat.md' },
  { id: 'sistema-audio', title: '7. Sistema de √Åudio', path: '07-sistema-audio.md' },
  { id: 'supabase-storage', title: '8. Supabase Storage', path: '08-supabase-storage.md' },
  { id: 'troubleshooting', title: '9. Troubleshooting', path: '09-troubleshooting.md' },
  { id: 'manual-usuario', title: 'Manual do Usu√°rio', path: '06-manual-usuario.md' },
  { id: 'guia-tecnico', title: 'Guia T√©cnico', path: '07-guia-tecnico.md' }
];

// Conte√∫do completo da documenta√ß√£o (seria melhor buscar dos arquivos reais)
const documentationContent: Record<string, string> = {
  'readme': `# Sistema de Gest√£o de Clientes e Campanhas

## üìã √çndice da Documenta√ß√£o

### üìö Documenta√ß√£o Principal
- **1. Vis√£o Geral** - Introdu√ß√£o e arquitetura do sistema
- **2. Perfis de Usu√°rio** - Tipos de usu√°rio e permiss√µes
- **3. M√≥dulos do Sistema** - Funcionalidades principais
- **4. Base de Dados** - Estrutura do banco de dados
- **5. Fluxo de Trabalho** - Processos e estados

### üÜï Funcionalidades Avan√ßadas
- **6. Sistema de Chat** - Comunica√ß√£o em tempo real
- **7. Sistema de √Åudio** - Grava√ß√£o e reprodu√ß√£o de √°udios
- **8. Supabase Storage** - Gest√£o de arquivos
- **9. Troubleshooting** - Problemas comuns e solu√ß√µes

## üöÄ Principais Funcionalidades

### ‚úÖ Funcionalidades Implementadas
- **Gest√£o Completa de Clientes** - CRUD completo com filtros avan√ßados
- **Sistema de Campanhas** - 15+ status diferentes e workflow completo
- **Controle de Comiss√µes** - Gest√£o financeira transparente
- **Dashboard Multi-perfil** - Vis√µes espec√≠ficas por tipo de usu√°rio
- **Briefings Detalhados** - Formul√°rios estruturados para coleta de dados
- **Upload de Materiais** - Sistema de arquivos integrado
- **üÜï Chat em Tempo Real** - Comunica√ß√£o instant√¢nea gestor-cliente
- **üÜï Mensagens de √Åudio** - Grava√ß√£o e reprodu√ß√£o de √°udios
- **üÜï Supabase Storage** - Armazenamento seguro de arquivos
- **üÜï Realtime Updates** - Atualiza√ß√µes instant√¢neas via WebSocket

## üèóÔ∏è Arquitetura T√©cnica

### Frontend
- **React 18** com TypeScript
- **Vite** para build e desenvolvimento
- **Tailwind CSS** + **shadcn/ui** para interface
- **TanStack Query** para estado e cache
- **React Router** para navega√ß√£o

### Backend
- **Supabase** (PostgreSQL + Auth + Realtime + Storage)
- **Row Level Security (RLS)** para seguran√ßa
- **Edge Functions** para l√≥gicas serverless
- **Realtime** para comunica√ß√£o instant√¢nea

**Sistema desenvolvido para gest√£o completa de clientes, campanhas publicit√°rias e processos de vendas.**`,

  'visao-geral': `# 1. Vis√£o Geral do Sistema

## üéØ Prop√≥sito
O Sistema de Gest√£o de Clientes e Campanhas √© uma plataforma completa para gerenciar todo o ciclo de vida de campanhas publicit√°rias, desde a capta√ß√£o de clientes at√© a entrega final e controle de comiss√µes, incluindo comunica√ß√£o em tempo real via chat integrado.

## üèóÔ∏è Arquitetura

### Frontend
- **React** com TypeScript
- **Vite** como bundler
- **Tailwind CSS** + **shadcn/ui** para interface
- **React Router** para navega√ß√£o
- **TanStack Query** para gerenciamento de estado
- **Realtime subscriptions** para atualiza√ß√µes em tempo real

### Backend
- **Supabase** (PostgreSQL + Auth + Realtime + Storage)
- **Row Level Security (RLS)** para seguran√ßa
- **Edge Functions** para l√≥gicas espec√≠ficas
- **Storage** para arquivos e materiais de √°udio
- **Realtime** para chat e atualiza√ß√µes instant√¢neas

### Comunica√ß√£o
- **Sistema de Chat Integrado** com mensagens em tempo real
- **Mensagens de √Åudio** com grava√ß√£o e reprodu√ß√£o
- **Upload de Materiais** via Supabase Storage
- **Notifica√ß√µes** em tempo real

## üéØ Objetivos Principais
1. **Centralizar Gest√£o**: Unificar processos de vendas, campanhas e clientes
2. **Automatizar Fluxos**: Reduzir trabalho manual e erros humanos
3. **Controlar Qualidade**: Acompanhar status e prazos das campanhas
4. **Gerenciar Comiss√µes**: Controle transparente de pagamentos
5. **Facilitar Comunica√ß√£o**: Canal direto entre todos os envolvidos via chat
6. **Armazenar Materiais**: Gest√£o centralizada de arquivos e √°udios`,

  'sistema-chat': `# 6. Sistema de Chat

## üí¨ Vis√£o Geral
O Sistema de Chat √© uma funcionalidade integrada que permite comunica√ß√£o em tempo real entre gestores e clientes, incluindo suporte a mensagens de texto e √°udio, com todas as mensagens salvas no banco de dados.

## üèóÔ∏è Arquitetura do Chat

### Componentes Principais
- **ChatInterface**: Interface principal do chat
- **MessageInput**: Campo de entrada de mensagens
- **MessageItem**: Exibi√ß√£o individual de mensagens
- **AudioRecorder**: Grava√ß√£o de mensagens de √°udio
- **AdminChatOverview**: Vis√£o geral para administradores

### Tecnologias Utilizadas
- **Supabase Realtime**: Para mensagens instant√¢neas
- **Supabase Storage**: Para armazenamento de √°udios
- **WebRTC**: Para grava√ß√£o de √°udio no navegador
- **TanStack Query**: Para cache e sincroniza√ß√£o

## üë• Permiss√µes e Acesso

### Perfis com Acesso ao Chat
- **Admin**: Vis√£o geral de todas as conversas
- **Gestor**: Chat com clientes da sua gestoria
- **Cliente**: Chat apenas com seu gestor designado

### Funcionalidades do Chat
- **Mensagens de Texto**: Comunica√ß√£o escrita b√°sica
- **Mensagens de √Åudio**: Grava√ß√£o e reprodu√ß√£o de √°udios
- **Indicadores de Status**: Lida/n√£o lida, online/offline
- **Notifica√ß√µes**: Alertas para novas mensagens`,

  'sistema-audio': `# 7. Sistema de √Åudio

## üéµ Vis√£o Geral
O Sistema de √Åudio permite grava√ß√£o, upload, armazenamento e reprodu√ß√£o de mensagens de √°udio dentro do sistema de chat, proporcionando uma comunica√ß√£o mais rica e eficiente entre gestores e clientes.

## üéôÔ∏è Grava√ß√£o de √Åudio

### Tecnologia Utilizada
- **WebRTC**: API nativa do navegador para captura de √°udio
- **MediaRecorder**: Interface para grava√ß√£o de m√≠dia
- **getUserMedia**: Acesso ao microfone do usu√°rio

### Configura√ß√µes de Grava√ß√£o
- **Formato**: audio/webm;codecs=opus
- **Qualidade**: 128kbps
- **Cancelamento de eco**: Ativado
- **Supress√£o de ru√≠do**: Ativado
- **Taxa de amostragem**: 44.1kHz

### Processo de Grava√ß√£o
1. Solicitar Permiss√£o
2. Configurar MediaRecorder
3. Iniciar Grava√ß√£o
4. Capturar Chunks
5. Parar Grava√ß√£o
6. Processar Blob
7. Preview/Upload

## üíæ Armazenamento
- **Bucket**: chat-audios
- **P√∫blico**: Sim (necess√°rio para reprodu√ß√£o)
- **Organiza√ß√£o**: {user_id}/audio_{timestamp}.webm
- **Tamanho M√°ximo**: 10MB por arquivo`,

  'supabase-storage': `# 8. Supabase Storage

## üìÅ Vis√£o Geral
O Supabase Storage √© utilizado para armazenar e gerenciar todos os arquivos do sistema, incluindo mensagens de √°udio, materiais de clientes, assets de campanhas e outros documentos importantes.

## üóÇÔ∏è Buckets Configurados

### chat-audios (Ativo)
**Armazenamento de mensagens de √°udio do chat**
- **P√∫blico**: ‚úÖ Sim (necess√°rio para reprodu√ß√£o direta)
- **Tamanho M√°ximo**: 10MB por arquivo
- **Formatos Aceitos**: WebM, MP4, WAV, OGG
- **Organiza√ß√£o**: {user_id}/audio_{timestamp}.webm

### client-materials (Planejado)
**Materiais enviados pelos clientes**
- **P√∫blico**: ‚ùå N√£o (acesso controlado)
- **Tamanho M√°ximo**: 50MB por arquivo
- **Formatos Aceitos**: PNG, JPG, PDF, MP4, ZIP, etc.
- **Organiza√ß√£o**: {cliente_id}/{categoria}/{arquivo}

## üîê Pol√≠ticas de Seguran√ßa (RLS)

### Pol√≠ticas para chat-audios
- Upload de √°udios por usu√°rios autenticados
- Leitura p√∫blica para reprodu√ß√£o
- Listagem de pr√≥prios arquivos
- Deletar pr√≥prios arquivos`,

  'troubleshooting': `# 9. Troubleshooting

## üö® Problemas Comuns e Solu√ß√µes

### Problemas de Login e Autentica√ß√£o
- Email ou senha incorretos
- Usu√°rio n√£o autorizado
- Infinite loading na tela de login

### Problemas com Chat e Mensagens
- Mensagens n√£o aparecem em tempo real
- Erro ao enviar mensagem
- Chat n√£o carrega conversas anteriores

### Problemas com √Åudio
- N√£o consegue gravar √°udio
- √Åudio n√£o reproduz
- Upload de √°udio falha

### Problemas com Storage
- Bucket n√£o encontrado
- Pol√≠ticas RLS bloqueando acesso

### Problemas de Performance
- Sistema muito lento
- Mensagens de chat lentas

## üìä Monitoramento e Logs
- Como ativar logs detalhados
- Verificar logs do Supabase
- Logs importantes para acompanhar

## üìû Contatos para Suporte
- Suporte T√©cnico
- Escala√ß√£o de Problemas
- Informa√ß√µes para Reportar Problemas`
};

export function DocumentationDownloader() {
  const [isGenerating, setIsGenerating] = useState(false)

  const generateCompleteDocumentation = () => {
    const currentDate = new Date().toLocaleDateString('pt-BR')
    const timestamp = new Date().toISOString()
    
    let completeDoc = `# DOCUMENTA√á√ÉO COMPLETA - SISTEMA DE GEST√ÉO DE CLIENTES E CAMPANHAS
Gerado em: ${currentDate}
Timestamp: ${timestamp}
Vers√£o: 2.0.0 (com Chat e √Åudio)

=============================================================================

`

    // Adicionar cada documento
    documentationFiles.forEach((file, index) => {
      const content = documentationContent[file.id] || `# ${file.title}\n\nConte√∫do n√£o dispon√≠vel.`
      
      completeDoc += `
${'='.repeat(80)}
${file.title.toUpperCase()}
${'='.repeat(80)}

${content}

${'='.repeat(80)}

`
    })

    // Adicionar informa√ß√µes finais
    completeDoc += `
=============================================================================
INFORMA√á√ïES ADICIONAIS PARA IA/GPT
=============================================================================

CONTEXTO DO SISTEMA:
- Sistema web desenvolvido em React + TypeScript
- Backend: Supabase (PostgreSQL + Auth + Realtime + Storage)
- Frontend: Tailwind CSS + shadcn/ui
- Funcionalidades principais: Gest√£o de clientes, campanhas, chat em tempo real, √°udios

PERFIS DE USU√ÅRIO:
1. Admin (@admin) - Acesso total
2. Gestor (@trafegoporcents.com) - Gerencia clientes da gestoria + chat
3. Vendedor (vendedor*@trafegoporcents.com) - Cadastra novos clientes
4. Cliente (email individual) - Preenche briefing + chat com gestor
5. Sites (sites*/criador*/design*) - Gerencia cria√ß√£o de sites

STATUS DE CAMPANHA (15 estados):
Cliente Novo ‚Üí Preenchimento do Formul√°rio ‚Üí Brief ‚Üí Criativo ‚Üí Site ‚Üí 
Agendamento ‚Üí Configurando BM ‚Üí Subindo Campanha ‚Üí Otimiza√ß√£o ‚Üí Saque Pendente

FUNCIONALIDADES PRINCIPAIS:
- Dashboard espec√≠fico por perfil
- CRUD completo de clientes com RLS
- Sistema de chat em tempo real (gestor ‚Üî cliente)
- Mensagens de √°udio (grava√ß√£o/reprodu√ß√£o)
- Upload de materiais via Supabase Storage
- Controle de comiss√µes e saques
- Realtime updates via WebSocket

TECNOLOGIAS CHAVE:
- Supabase Realtime para chat instant√¢neo
- WebRTC para grava√ß√£o de √°udio
- Supabase Storage com buckets p√∫blicos/privados
- Row Level Security (RLS) em todas as tabelas
- TanStack Query para cache e sincroniza√ß√£o

ESTRUTURA DO BANCO:
- todos_clientes (tabela principal)
- chat_mensagens (sistema de chat)
- briefings_cliente, vendas_cliente, arquivos_cliente
- gestores, comentarios_cliente, solicitacoes_saque
- Storage: bucket 'chat-audios' (p√∫blico para reprodu√ß√£o)

ARQUITETURA DE SEGURAN√áA:
- RLS isolando dados por gestor/cliente
- Policies espec√≠ficas para cada perfil
- Storage com pol√≠ticas granulares
- Autentica√ß√£o obrigat√≥ria em todo o sistema

Este sistema √© uma plataforma completa de gest√£o comercial com foco em 
campanhas publicit√°rias, incluindo comunica√ß√£o em tempo real e controle 
financeiro de comiss√µes.

=============================================================================
FIM DA DOCUMENTA√á√ÉO
Gerado automaticamente em ${timestamp}
=============================================================================
`

    return completeDoc
  }

  const downloadDocumentation = () => {
    setIsGenerating(true)
    
    try {
      const completeDoc = generateCompleteDocumentation()
      
      // Criar blob e fazer download
      const blob = new Blob([completeDoc], { type: 'text/plain;charset=utf-8' })
      const url = URL.createObjectURL(blob)
      
      const link = document.createElement('a')
      link.href = url
      link.download = `documentacao-completa-${new Date().toISOString().split('T')[0]}.txt`
      document.body.appendChild(link)
      link.click()
      document.body.removeChild(link)
      
      URL.revokeObjectURL(url)
      
      toast.success('Documenta√ß√£o baixada com sucesso!')
    } catch (error) {
      console.error('Erro ao gerar documenta√ß√£o:', error)
      toast.error('Erro ao gerar documenta√ß√£o')
    } finally {
      setIsGenerating(false)
    }
  }

  return (
    <div className="border-t pt-4 mt-4">
      <div className="flex items-center gap-3 mb-3">
        <FileText className="h-5 w-5 text-primary" />
        <div>
          <h3 className="font-medium">Download Completo</h3>
          <p className="text-sm text-muted-foreground">
            Baixe toda a documenta√ß√£o em arquivo TXT
          </p>
        </div>
      </div>
      
      <Button
        onClick={downloadDocumentation}
        disabled={isGenerating}
        className="w-full"
        variant="outline"
      >
        {isGenerating ? (
          <>
            <Loader2 className="mr-2 h-4 w-4 animate-spin" />
            Gerando arquivo...
          </>
        ) : (
          <>
            <Download className="mr-2 h-4 w-4" />
            Baixar Documenta√ß√£o Completa (.txt)
          </>
        )}
      </Button>
      
      <p className="text-xs text-muted-foreground mt-2 text-center">
        Ideal para consulta offline ou para uso com IA/GPT
      </p>
    </div>
  )
}
