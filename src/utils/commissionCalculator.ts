
// Regras de comiss√£o baseadas no valor da venda
const COMMISSION_RULES = [
  { saleValue: 500, commission: 100 },
  { saleValue: 350, commission: 80 },
  { saleValue: 250, commission: 60 }
] as const

// Comiss√£o padr√£o quando n√£o h√° valor de venda ou n√£o se encaixa nas regras
const DEFAULT_COMMISSION = 60

/**
 * Calcula a comiss√£o baseada no valor da venda
 * @param saleValue - Valor da venda em reais
 * @returns Valor da comiss√£o calculada
 */
export function calculateCommission(saleValue: number): number {
  console.log(`üßÆ [CommissionCalculator] Calculando comiss√£o para venda de R$ ${saleValue}`)

  // Verificar se o valor corresponde exatamente a uma regra
  const exactRule = COMMISSION_RULES.find(rule => rule.saleValue === saleValue)
  if (exactRule) {
    console.log(`‚úÖ [CommissionCalculator] Regra exata encontrada: R$ ${saleValue} ‚Üí R$ ${exactRule.commission}`)
    return exactRule.commission
  }

  // Para valores intermedi√°rios, usar interpola√ß√£o linear
  const sortedRules = [...COMMISSION_RULES].sort((a, b) => a.saleValue - b.saleValue)
  
  // Se valor √© menor que o menor valor nas regras
  if (saleValue < sortedRules[0].saleValue) {
    console.log(`‚ö†Ô∏è [CommissionCalculator] Valor R$ ${saleValue} menor que regras. Usando comiss√£o padr√£o: R$ ${DEFAULT_COMMISSION}`)
    return DEFAULT_COMMISSION
  }

  // Se valor √© maior que o maior valor nas regras
  if (saleValue > sortedRules[sortedRules.length - 1].saleValue) {
    // Para valores acima de R$ 500, usar propor√ß√£o baseada na regra mais alta
    const highestRule = sortedRules[sortedRules.length - 1]
    const proportion = saleValue / highestRule.saleValue
    const calculatedCommission = Math.round(highestRule.commission * proportion)
    console.log(`üìà [CommissionCalculator] Valor acima das regras. Calculando proporcionalmente: R$ ${calculatedCommission}`)
    return calculatedCommission
  }

  // Interpola√ß√£o linear entre duas regras
  for (let i = 0; i < sortedRules.length - 1; i++) {
    const lowerRule = sortedRules[i]
    const upperRule = sortedRules[i + 1]

    if (saleValue > lowerRule.saleValue && saleValue < upperRule.saleValue) {
      const ratio = (saleValue - lowerRule.saleValue) / (upperRule.saleValue - lowerRule.saleValue)
      const interpolatedCommission = Math.round(lowerRule.commission + ratio * (upperRule.commission - lowerRule.commission))
      
      console.log(`üîÑ [CommissionCalculator] Interpola√ß√£o entre R$ ${lowerRule.saleValue} e R$ ${upperRule.saleValue}: R$ ${interpolatedCommission}`)
      return interpolatedCommission
    }
  }

  // Fallback para comiss√£o padr√£o
  console.log(`üîÑ [CommissionCalculator] Usando comiss√£o padr√£o: R$ ${DEFAULT_COMMISSION}`)
  return DEFAULT_COMMISSION
}

/**
 * Valida se um valor de venda √© v√°lido para c√°lculo de comiss√£o
 * @param saleValue - Valor da venda
 * @returns true se v√°lido, false caso contr√°rio
 */
export function isValidSaleValue(saleValue: number | null | undefined): boolean {
  return typeof saleValue === 'number' && saleValue > 0 && !isNaN(saleValue)
}

/**
 * Obt√©m a descri√ß√£o da regra de comiss√£o aplicada
 * @param saleValue - Valor da venda
 * @returns Descri√ß√£o da regra aplicada
 */
export function getCommissionRuleDescription(saleValue: number): string {
  const commission = calculateCommission(saleValue)
  
  const exactRule = COMMISSION_RULES.find(rule => rule.saleValue === saleValue)
  if (exactRule) {
    return `Regra fixa: R$ ${saleValue} ‚Üí R$ ${commission}`
  }

  if (saleValue < COMMISSION_RULES[0].saleValue || saleValue > COMMISSION_RULES[COMMISSION_RULES.length - 1].saleValue) {
    return `Valor fora das regras padr√£o. Calculado: R$ ${commission}`
  }

  return `Interpola√ß√£o linear entre regras. Calculado: R$ ${commission}`
}

/**
 * Obt√©m todas as regras de comiss√£o configuradas
 * @returns Array com as regras de comiss√£o
 */
export function getCommissionRules() {
  return COMMISSION_RULES
}
