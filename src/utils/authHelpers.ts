
import { supabase } from '@/lib/supabase'

export const normalizeEmail = (email: string): string => {
  return email.toLowerCase().trim()
}

export const checkUserType = async (email: string): Promise<'admin' | 'gestor' | 'cliente' | 'vendedor' | 'sites' | 'unauthorized' | 'error'> => {
  console.log('üîç [authHelpers] === VERIFICA√á√ÉO DE TIPO DE USU√ÅRIO ===')
  console.log('üîç [authHelpers] Email autenticado:', `"${email}"`)
  console.log('üîç [authHelpers] IMPORTANTE: Este usu√°rio J√Å foi autenticado pelo Supabase Auth')
  
  const normalizedEmail = normalizeEmail(email)
  console.log('üîç [authHelpers] Email normalizado:', `"${normalizedEmail}"`)
  
  try {
    // L√ìGICA BASEADA NO DOM√çNIO - Admin primeiro
    if (normalizedEmail.includes('@admin')) {
      console.log('üëë [authHelpers] Usu√°rio √© ADMIN (dom√≠nio @admin)')
      return 'admin'
    }

    // Verifica√ß√£o espec√≠fica para criadores de sites
    if (normalizedEmail.includes('criador') || normalizedEmail.includes('site') || normalizedEmail.includes('webdesign')) {
      console.log('üåê [authHelpers] Usu√°rio √© SITES (criador/site/webdesign)')
      return 'sites'
    }

    // Verifica√ß√£o para vendedores
    if (normalizedEmail.startsWith('vendedor') && normalizedEmail.includes('@trafegoporcents.com')) {
      console.log('üíº [authHelpers] Usu√°rio √© VENDEDOR (vendedor*@trafegoporcents.com)')
      return 'vendedor'
    }

    // Verifica√ß√£o para gestores (@trafegoporcents.com mas n√£o vendedor)
    if (normalizedEmail.includes('@trafegoporcents.com')) {
      console.log('üë®‚Äçüíº [authHelpers] Usu√°rio √© GESTOR (dom√≠nio @trafegoporcents.com)')
      return 'gestor'
    }

    // CORRE√á√ÉO PRINCIPAL: Verificar se √© cliente na tabela todos_clientes
    console.log('üîç [authHelpers] Verificando se √© cliente na tabela todos_clientes...')
    const { data: cliente, error: clienteError } = await supabase
      .from('todos_clientes')
      .select('id, email_cliente, nome_cliente')
      .eq('email_cliente', normalizedEmail)
      .single()

    if (clienteError) {
      console.log('‚ö†Ô∏è [authHelpers] Erro ao buscar cliente ou cliente n√£o encontrado:', clienteError.message)
      console.log('‚ö†Ô∏è [authHelpers] C√≥digo do erro:', clienteError.code)
      
      // Se o erro for PGRST116 (nenhum resultado encontrado), √© normal
      if (clienteError.code === 'PGRST116') {
        console.log('‚ùå [authHelpers] Cliente n√£o encontrado na tabela todos_clientes')
      }
    } else if (cliente) {
      console.log('‚úÖ [authHelpers] CLIENTE ENCONTRADO!')
      console.log('üë§ [authHelpers] ID:', cliente.id)
      console.log('üë§ [authHelpers] Nome:', cliente.nome_cliente)
      console.log('üë§ [authHelpers] Email:', cliente.email_cliente)
      return 'cliente'
    }

    // Se chegou at√© aqui, o usu√°rio n√£o foi encontrado em nenhuma categoria
    console.log('‚ùå [authHelpers] USU√ÅRIO N√ÉO AUTORIZADO')
    console.log('‚ùå [authHelpers] Email n√£o encontrado em nenhuma tabela do sistema')
    console.log('‚ùå [authHelpers] Poss√≠veis solu√ß√µes:')
    console.log('   1. Verificar se o email est√° cadastrado na tabela todos_clientes')
    console.log('   2. Verificar se o email est√° cadastrado na tabela gestores')
    console.log('   3. Solicitar ao admin para adicionar o usu√°rio ao sistema')
    
    return 'unauthorized'

  } catch (error) {
    console.error('‚ùå [authHelpers] ERRO CR√çTICO:', error)
    console.log('üîß [authHelpers] Retornando erro para investiga√ß√£o')
    return 'error'
  }
}

export const getManagerName = async (email: string): Promise<string> => {
  const normalizedEmail = normalizeEmail(email)
  
  // Para usu√°rios de sites, retornar nome espec√≠fico
  if (normalizedEmail.includes('criador') || normalizedEmail.includes('site') || normalizedEmail.includes('webdesign')) {
    return 'Criador de Sites'
  }
  
  try {
    // Tentar buscar nome do gestor primeiro
    const { data: gestorData, error: gestorError } = await supabase
      .from('gestores')
      .select('nome')
      .ilike('email', normalizedEmail)
      .eq('ativo', true)
      .single()

    if (!gestorError && gestorData) {
      return gestorData.nome
    }

    // Se n√£o for gestor, tentar buscar nome do cliente
    const { data: clienteData, error: clienteError } = await supabase
      .from('todos_clientes')
      .select('nome_cliente')
      .eq('email_cliente', normalizedEmail)
      .single()

    if (!clienteError && clienteData) {
      return clienteData.nome_cliente || 'Cliente'
    }

  } catch (error) {
    console.warn('‚ö†Ô∏è [authHelpers] Erro ao buscar nome do usu√°rio:', error)
  }
  
  return 'Usu√°rio'
}
